library(devtools)
document()  # regenerate NAMESPACE and documentation
install()   # reinstall cleanly
8:26
remove.packages("ccar3")
library(devtools)
document()  # regenerate NAMESPACE and documentation
install()   # reinstall cleanly
X <- matrix(rnorm(100*10), 100, 10)
Y <- matrix(rnorm(100*5), 100, 5)
result <- cca_rrr_cv(X, Y, r = 2, kfolds=3, parallelize = FALSE)
result
names(result)
all(c("ufinal", "vfinal", "rmse", "lambda", "cor") %in% names(result))
set.seed(123)
r = 3
gen = generate_example_sparse_U(n=10000, p1=100, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
result <- cca_rrr_cv(X, Y, r = 2, kfolds=3, parallelize = FALSE)
result
all(c("ufinal", "vfinal", "rmse", "lambda", "cor") %in% names(result)))
all(c("ufinal", "vfinal", "rmse", "lambda", "cor") %in% names(result))
dim(result$U)
dim(result$ufinal
)
names(results)
names(result)
all(c("ufinal", "vfinal", "rmse", "lambda", "cor") %in% names(result))
dim(result$vfinal)
gen = generate_example_sparse_U(n=100, p1=50, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
source("~/Documents/ccar3/tests/testthat/helper-generate_example_rrr.R")
r = 3
gen = generate_example_sparse_U(n=100, p1=50, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
r = 2
gen = generate_example_sparse_U(n=100, p1=50, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
X = gen$X
Y = gen$Y
result <- cca_rrr_cv(X, Y, r = 2, kfolds=3, parallelize = FALSE)
all(c("ufinal", "vfinal", "rmse", "lambda", "cor") %in% names(result))
dim((result$ufinal))
dim(result$vfinal)
set.seed(123)
r = 3
gen = generate_example_sparse_U(n=100, p1=50, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
##### Generate toy example data
set.seed(123)
r = 3
gen = generate_example_sparse_U(n=1000, p1=100, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
X = gen$X
Y = gen$Y
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 100),
kfolds=3, Kx=NULL, r=r, parallelize = TRUE,
LW_Sy = TRUE)
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 100),
kfolds=3, Kx=NULL, parallelize = TRUE,
LW_Sy = TRUE)
result
subdistance(result$ufinal, gen$u)
subdistance(result$vfinal, gen$v)
gen = generate_example_sparse_U(n=10000, p1=100, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
X = gen$X
Y = gen$Y
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 100),
kfolds=3, Kx=NULL, parallelize = TRUE,
LW_Sy = TRUE)
r = 3
gen = generate_example_sparse_U(n=1000, p1=30, p2=10,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
X = gen$X
Y = gen$Y
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 10),
kfolds=3, Kx=NULL, parallelize = TRUE,
LW_Sy = TRUE)
expect_type(result, "list")
subdistance(result$ufinal, gen$u)
subdistance(result$vfinal, gen$v)
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 10),
kfolds=3, Kx=NULL, parallelize = TRUE,
LW_Sy = FALSE)
subdistance(result$vfinal, gen$v)
subdistance(result$ufinal, gen$u)
gen = generate_example_sparse_U(n=1000, p1=30, p2=5,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
X = gen$X
Y = gen$Y
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 10),
kfolds=3, Kx=NULL, parallelize = TRUE,
LW_Sy = FALSE)
subdistance(result$vfinal, gen$v)
gen = generate_example_sparse_U(n=5000, p1=30, p2=5,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
r = 2
gen = generate_example_sparse_U(n=5000, p1=30, p2=5,
r_pca = 5,
nnzeros = 10,
theta = diag(seq(0.9, 0.85, length.out = r)),
lambda_pca = 1,
r = r,  overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
X = gen$X
Y = gen$Y
result <- cca_rrr_cv(X, Y, r = r,
solver = "ADMM", param_lambda=10^seq(-5, 1.5, length.out = 10),
kfolds=3, Kx=NULL, parallelize = TRUE,
LW_Sy = FALSE)
expect_type(result, "list")
subdistance(result$vfinal, gen$v)
subdistance(result$ufinal, gen$u)
expect_equal(dim(result$V)[2], r)
##### Generate toy example data
set.seed(123)
r = r
gen = generate_example_group(n=10000, p1=100, p2=5,
r_pca = 3,
nnzeros = 5,
theta = diag(c(0.9,  0.8)),
lambda_pca = 1,
r = 2, overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
groups <- createFolds(1:10, k = 2, list = TRUE, returnTrain = FALSE) ### creates groups of equal size
result1 <- cca_group_rrr(X, Y, lambda=0, groups=groups, r = r)
result2 <- cca_group_rrr(X, Y, lambda=0, groups=groups, r = r, solver="CVXR")
(dim(result1$U)
)
##### Generate toy example data
set.seed(123)
r = r
gen = generate_example_group(n=10000, p1=100, p2=5,
r_pca = 3,
nnzeros = 5,
theta = diag(c(0.9,  0.8)),
lambda_pca = 1,
r = 2, overlapping_amount = 1,
normalize_diagonal = TRUE,
n_new = 5000)
#### Generate groups
library(caret)
groups <- createFolds(1:10, k = 2, list = TRUE, returnTrain = FALSE) ### creates groups of equal size
result1 <- cca_group_rrr(X, Y, lambda=0, groups=groups, r = r)
result2 <- cca_group_rrr(X, Y, lambda=0, groups=groups, r = r, solver="CVXR")
expect_type(result, "list")
expect_true(all(c("U", "V", "loss", "total_corr", "cor") %in% names(result)))
dim(result1$U)[
]
dim(X)
